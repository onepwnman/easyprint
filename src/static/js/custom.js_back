
// Message Flashing  
//
// function notification(type, title, text, icon){
//     var note = PNotify.alert({
//         type: type,
//         title: title,
//         text: text,
//         icon: icon
//     });
//
//     note.on('click', function(){
//         note.close();
//     });
// }


// for development
var sock = io.connect('ws://192.168.1.9:12000');
// for production
// var sock = io.connect('https://easyprint.hopto.org');

// sock.on('message', function(msg){
//     // console.log(type(msg));
//     if(msg.type === 'normal'){
//         $('#messages').append('>> '+msg.message+'<br>');
//     }else{
//         $('#messages').append('<li>' + msg.message + '</li>');
//     }
//     console.log('Received Message : '+msg.type);
// });



sock.on('notify', function(msg) {
    notification(msg.type, msg.title, msg.text, msg.icon);
});


function convertHMS(value) {
    const sec = parseInt(value, 10); // convert value to number if it's string
    let hours   = Math.floor(sec / 3600); // get hours
    let minutes = Math.floor((sec - (hours * 3600)) / 60); // get minutes
    let seconds = sec - (hours * 3600) - (minutes * 60); //  get seconds
    // add 0 if value < 10
    if (hours   < 10) {hours   = "0"+hours;}
    if (minutes < 10) {minutes = "0"+minutes;}
    if (seconds < 10) {seconds = "0"+seconds;}
    return hours+':'+minutes+':'+seconds; // Return is HH : MM : SS
}



// var elementNum = 0;
// var page = 1;
// // Server Side Event
// var source = new EventSource("/stream");
// source.addEventListener('print', function(event) {
//     var res = JSON.parse(event.data);
//     if (res['print_waiting_list'].length){
//         var currentPrintingData = res['print_waiting_list'][0];
//         var currentPrintingStatus = res['status'];
//         var html = '';
//         html += '<h5 class="card-header">Print Status</h5>';
//         html += '<div class="card-body p-0">';
//         html += '<div class="p-3 current-work">';
//         html += '<label for="print-data"> Current Print</label>';
//         // html += '<div class="col-sm-6">';
//         html += '<div id="print-date">';
//         html += '<span>File: ' + currentPrintingData['filename'] + '</span></br>';
//         html += '<span>User: ' + currentPrintingData['user'] + '</span></br>';
//         html += '<span>Added time: ' + currentPrintingData['added_time'] + '</span></br>';
//         html += '<span>Estimated time: ' + convertHMS(currentPrintingData['estimated_time']) + '</span></br>';
//         html += '</div>';
//         // html += '<div class="col-sm-6 pt-3">';
//         html += '<hr>';
//
//         if (currentPrintingStatus['total_layer'] == 0) {
//             html += '<span>Status: Now... Ready for print, heating up the print bed!</br>';
//         } else {
//             html += '<span>Layer: ' + currentPrintingStatus['current_layer'] + '/' + currentPrintingStatus['total_layer'];
//         }
//         html += '<span>Elapsed time: ' + convertHMS(currentPrintingStatus['elapsed_time']) + '</span></br>';
//         html += '<div class="pt-2">';
//         html += '<div class="progress">';
//         html += '<div class="progress-bar progress-bar-striped progress-bar-animated custom-progress-bar" role="progressbar"';
//         var progress = parseInt(currentPrintingStatus['elapsed_time']/currentPrintingData['estimated_time'] * 100);
//         if (progress >= 100) {
//             progress = 100;
//         }
//         html += 'aria-valuenow="' + progress + '" aria-valuemin="0" aria-valuemax="100" style="width: ' + progress + '%">' + progress + '%</div>';
//         html += '</div>'
//         html += '</div>'
//         html += '</div>'
//         html += '</div>'
        
        // if (res['print_waiting_list'].length > 1) {
        //    for (var i = 1 ; i < res['print_waiting_list'].length ; i++) {
        //        html += '<ul class="list-group list-group-flush">';
        //        html += '<li class="list-group-item waiting-list">';
        //        html += '<span>File: ' + res['print_waiting_list'][i]['filename'] + '</span></br>';
        //        html += '<span>User: ' + res['print_waiting_list'][i]['user'] + '</span></br>';
        //        html += '<span>Added time: ' + res['print_waiting_list'][i]['added_time'] + '</span></br>';
        //        html += '<span>Estimated time: ' + res['print_waiting_list'][i]['estimated_time'] + '</span></br>';
        //        html += '</li>';
        //        html += '</ul>';
        //    }
        // }




//         $('#print-waiting-list').html(html);
//     } else {
//         $('#print-waiting-list').html('<h5 class="card-header">Print Status</h5>' +
//             '<img src="/static/img/need-work.jpg" class="card-img-top empty-list" alt="">');
//     }
//
//     console.log(res);
// }, false);




// 꼭 주석 해제
// if(window.document.getElementById('printing-area')) {
    /* --------- DROPZONE INSTANCE --------- */
    const DROPZONE = new Dropzone("#dropzone", {
        // clickable: '#dropzone',
        clickable: '#addFiles',
        acceptedFiles: '.stl',
        maxFilesize: 16, //MB
        parallelUploads: 5,
        previewTemplate: document.getElementById("template").innerHTML
    });


    /* --------- SELECTABLE INSTANCE --------- */
    const SELECTABLE = new Selectable({
        appendTo: "#dropzone",
        ignore: "[data-dz-remove]", // stop remove button triggering selection
        lasso: {
            border: "1px solid rgba(155, 155, 155,1.0)",
            backgroundColor: "rgba(255, 255, 255,0.4)"
        }
    }); 
    
    // Global modeling variable to make only one model instance on the page
    var modelFlag = true;
    var modelPath, modelPosition, modelList = {};
      
    function renderModel() {
        if (modelPath) {
            try {
                var isModel = $("#model-wrapper > div.active").attr("id");
                modelFlag = false;
            } catch (e) {
            }
            var $div = $('<div id="model" class="model-size"></div>');
            $("#model-wrapper").html($div);
            STLViewer(modelPath, modelPosition);
            
        }
    }


    /* --------- BUTTONS --------- */
    const removeFiles = document.getElementById("removeFiles");
    removeFiles.classList.add('active');

    removeFiles.addEventListener("click", e => {
        // get files
        const files = DROPZONE.files;
        
        if ( files.length ) {
            for ( const file of files ) {
                // get the item instance from Selectable
                const el = SELECTABLE.get(file.previewElement);
                
                // if it's selected, then remove it.
                // Dropzone is set to listen to "removedfile" and 
                // will remove it from the Selectable instance
                // if ( el.selected ) {
                //     DROPZONE.removeFile(file);
                //
                //     // hide the button
                //     removeFiles.classList.remove("active");
                // }
                DROPZONE.removeFile(file);
                // hide the button
                // removeFiles.classList.remove("active");
            }
        }
			
    });

    

    // function nowLoading() {
    //     var w = $('.card-img')[0].width;
    //     var h = $('.card-img')[0].height;
    //
    //     var img = '<img src="static/img/loading.gif" style="display: block; margin-right: 30px; margin-top: 30px;"/>';
    //     $('#model-wrapper').html(img);
    // }

    
    /* --------- SELECTABLE EVENTS --------- */
    var selectedModel;
    function selectFile() {
        if (selectedModel) {
          SELECTABLE.deselect(selectedModel);
        }
        selectedModel = SELECTABLE.getSelectedItems()[0];
        
        if (selectedModel) {
            // console.log(selectedModel)
            var fileName = selectedModel.node.getElementsByClassName('file-name')[0].innerText
            modelPath = modelList[fileName];
            renderModel();
        }
    }

    SELECTABLE.on("end", selectFile);


    function selectOnly(fileName) {
        var files = DROPZONE.files;
        var prevSelected = SELECTABLE.getSelectedItems()[0];

        if (prevSelected) {
            SELECTABLE.deselect(prevSelected);
        }
        for (file of files) {
            if (file.name == fileName) {
                selectedModel = SELECTABLE.get(file.previewElement);
                SELECTABLE.select(selectedModel);
            }
        }
    }
    

    /* --------- DROPZONE EVENTS --------- */
    DROPZONE.on("addedfile", function(file, event) {
        if ($('.login-form')[0]) {
            notification('notice', 'login requierd', 'please login!', 'fas fa-sign-in-alt');
            DROPZONE.removeAllFiles(true);
            return false;
        }

        if (file.name.length > 64) {
            notification('notice', 'File name Too long', '', 'fas fa-exclamation-triangle');
            DROPZONE.removeAllFiles(true);
            return false;
        }
            

        const el = file.previewElement;
        
				if (modelList) {
						for (var element in modelList){
								if (element == file.name){
										DROPZONE.removeFile(file);
                    selectOnly(file.name);
                    modelPath = modelList[element];
                    renderModel();
										return false;
								}
						}
				}
			
        // add element to Selectable instance when added by Dropzone
        SELECTABLE.add(el);
        
        file.previewElement.querySelector(".file-progress-text").textContent = "Ready";
        file.previewElement.querySelector(".file-text").textContent = "Waiting";
        
        // bounce animation
        el.classList.add("animated", "bounceIn");
        setTimeout(() => {
            el.classList.remove("animated", "bounceIn");
        }, 550);    
    });

    DROPZONE.on("removedfile", function(file) {
        const el = file.previewElement;
        
        // remove element from Selectable instance when removed by Dropzone
        SELECTABLE.remove(el);
    });

    // this is just for the upload progress indicator
    DROPZONE.on("uploadprogress", (file, progress) => {
            if ($('.login-form')[0]) {
                notification('notice', 'Login requierd', 'Please Login!', 'fas fa-sign-in-alt');
                return false;
            }
            const el = file.previewElement;
            const circle = el.querySelector("circle");
            const r = circle.getAttribute("r");
            const circ = 2 * Math.PI * r;   
            const p = Math.round(progress);
            
            circle.style.strokeDashoffset = circ - (circ * (progress / 100));
            
            el.classList.remove("loading");
            el.querySelector(".mdi").classList.add("mdi-upload");
            el.querySelector(".file-progress-text").textContent = file.mock ? `Done` : `Processing`;    
            el.querySelector(".file-text").textContent = p === 100 ? `Uploaded` : `Uploading ${p}%`;    
    });


    DROPZONE.on("complete", function(file) {
        if ($('.login-form')[0]) {
            notification('notice', 'Login requierd', 'Please Login!', 'fas fa-sign-in-alt');
            return false;
        }
        const el = file.previewElement;
        const mdi = el.querySelector(".mdi");
        
        mdi.classList.remove("mdi-upload");
        mdi.classList.add("mdi-check");
        if (el.querySelector(".file-progress-text").textContent != `Error`) {
            el.querySelector(".file-progress-text").textContent = `Upload complete`;
        }

        // console.log(arguments);
        var response = JSON.parse(arguments[0].xhr.response);

        modelPath = response.path, modelPosition = response.elementID;
        modelList[response.original_file] = modelPath;
        // nowLoading();
        var files = DROPZONE.files;
        for (file of files) {
            if (file.name == response.original_file){
                if (selectedModel){
                    SELECTABLE.deselect(SELECTABLE.getSelectedItems()[0]);
                }
                selectedModel = SELECTABLE.get(file.previewElement);
                SELECTABLE.select(selectedModel);
            }
        }

        notification('success', 'File successfully uploaded!', '', 'fas fa-file-upload');
        renderModel();
    });

    DROPZONE.on("error", function(file, message, xhr) {
        const el = file.previewElement;
        const mdi = el.querySelector(".mdi");
        
        mdi.classList.remove("mdi-upload");
        mdi.classList.add("mdi-close");
        el.querySelector(".file-progress-text").textContent = `Error`;
        el.querySelector(".file-text").textContent = "Not allowed";
        // if ( xhr ){
        // if ( xhr.statusText !== "Not Found" ) {
        //     mdi.classList.remove("mdi-upload");
        //     mdi.classList.add("mdi-close");
        //     el.querySelector(".file-progress-text").textContent = `ERROR`;
        //     el.querySelector(".file-text").textContent = xhr.statusText;
        // }
        // } else {
            // el.classList.remove("dz-error");
        // }
    });



    // var slicedModel = {};
    var fileInfo = {}; 
    $("#slice").on("click", function(event) {
        if (selectedModel){
            // checking upload complete
            progressElement = selectedModel.node.getElementsByClassName('file-progress-text')
            if (progressElement[0].innerText != 'Upload complete') {
                notification('notice', 'File not uploaded', '', 'fas fa-file-upload');
            }

            
            if (selectedModel)
            var targetFile = selectedModel.node.getElementsByClassName('file-name')[0].innerText;
            fileInfo = {'originalFileName': targetFile, 'fileName': modelList[targetFile].split('/').pop(), 
								'quality': $("#qualitySelect").val(), 'infill': $("#densitySelect").val() };
            // slicedModel = {};

						// function convertHMS(value) {
						//     const sec = parseInt(value, 10); // convert value to number if it's string
						//     let hours   = Math.floor(sec / 3600); // get hours
						//     let minutes = Math.floor((sec - (hours * 3600)) / 60); // get minutes
						//     let seconds = sec - (hours * 3600) - (minutes * 60); //  get seconds
						//     // add 0 if value < 10
						//     if (hours   < 10) {hours   = "0"+hours;}
						//     if (minutes < 10) {minutes = "0"+minutes;}
						//     if (seconds < 10) {seconds = "0"+seconds;}
						//     return hours+':'+minutes+':'+seconds; // Return is HH : MM : SS
						// }

            var showProgressNote = function() {
                return PNotify.info({
                    text: 'Slicing is on progress',
                    icon: 'fas fa-spinner fa-pulse',
                    hide: false,
                    shadow: false,
										width: '300px',
                    modules: {
                      Buttons: {
                        closer: false,
                        sticker: false
                      }
                    }
                  });
            }
            var progressInfo = showProgressNote();
            var options = {};
            $("#slice").attr('disabled', '');
            $('#slice').html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Slicing...');

            sock.emit('slice', fileInfo) 
            sock.on('slice', function(msg) {
                alert(msg);
                console.log(msg);
            });
            
            // $.ajax({
            //     type: "POST",
            //     url: "/printer/slice",
            //     data: JSON.stringify(fileInfo),
            //     contentType: "application/json; charset=utf-8",
            //     dataType: "json",
            // }).done(function(response) {
						//       // Server Side Event
						//       if (response['status'] == 'queued') {
						//           var source = new EventSource('/printer/slice-stream?task_id=' + response['taskId']);
						//           source.addEventListener('slice', function(event) {
						//               var res = JSON.parse(event.data);
            //               if (res.progress != 'Running') {
            //                   // progressInfo.update(false);
            //                   if (res.progress == 'Complete') {
            //                       options.title = 'Done!';
            //                       options.text = 'Successfully Sliced'
            //                       options.type = 'success';
            //                       options.icon = 'fas fa-check-circle';
            //                       if (res.result) {
            //                           // slicedModel['stlFile'] = fileInfo['fileName'];
            //                           fileInfo['estimatedTime'] = res.result.TIME;
						//                           $("#modalLongTitle").text("Slicing Result of " + res.result['fileName']);
						//                           $("#modalList").html("<li class=\"list-group-item\">Layer Hight: " +
						//                               res.result['Layer height'] + "</li>" + "<li class=\"list-group-item\">Estimated Printing Time: " +
						//                               convertHMS(res.result.TIME) + "</li>" + "<li class=\"list-group-item\">Estimated Filament Usage: " +
						//                               res.result['Filament used'] + "</li>");
						//                           $("#printModal").modal('toggle');
            //                      }
            //                   } else if (res.progress == 'Error') {
            //                       options.title = 'Error!';
            //                       options.text = 'Couldn\'t finished sliceing job!'
            //                       options.type = 'error';
            //                       options.icon = 'fas fa-exclamation-triangle';
            //                   } else if (res.progress == 'Server Error') {
            //                       options.title = 'Server might be now busy';
            //                       options.text = 'Please try next time!';
            //                       options.type = 'error';
            //                       options.icon = 'fas fa-exclamation-triangle';
            //                   }
            //                   options.hide = true;
            //                   options.shadow = true;
            //                   options.width = PNotify.defaults.width;
            //                   source.close();
            //                   progressInfo.update(options);
            //                   $("#slice").removeAttr('disabled');
            //                   $('#slice').html('Slice<i class="pl-1 fab fa-slack-hash"></i>');
            //                   progressInfo.on('click', function() {
            //                       progressInfo.close();
            //                   });
            //               }
						//           }, false);
						//           // console.log(response['taskId']);
						//       } else if (response['status'] == 'running'){
            //             progressInfo.close();
            //             notification('notice', 'Slicing is already in progress!', 'Please wait for the previous task', 'fas fa-spinner fa-pulse');
						//       }
            // }).fail(function(error) {
            //     console.log('Server Error!!!');
            //     $("#slice").removeAttr('disabled');
            // })
        } else {
            notification('notice', 'File not selected!', 'Please select the printing target', 'fas fa-exclamation-triangle');
        }
    });


    $('#startPrint').on('click', function() {
				$('#printModal').modal('hide')
        $.ajax({
            type: "POST",
            url: "/printer/print",
            // data: JSON.stringify(slicedModel),
            data: JSON.stringify(fileInfo),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        }).done(function(response) {
						notification('success', 'Your file successfully put it in to the printing list', '', 'fas fa-check-circle');
        }).fail(function(response) {
						notification('error', 'Something is wrong!', 'Please check your settings', 'fas fa-exclamation-triangle');
        })
    });









    //
    // [> ---------- MOCK FILES ---------- <]
    // for ( let i = 0; i < 3; i++ ) {
    //     // Create the mock file:
    //     var mockFile = { name: makeid(8), size: randSize(100, 10000000), mock: true };
    //
    //     // Call the default addedfile event handler
    //     DROPZONE.emit("addedfile", mockFile);
    //
    //     // And optionally show the thumbnail of the file:
    //     DROPZONE.emit("thumbnail", mockFile, "/image/url");
    //
    //     // Make sure that there is no progress bar, etc...
    //     DROPZONE.emit("uploadprogress", mockFile, 100);
    //     DROPZONE.emit("complete", mockFile);
    //
    //     DROPZONE.files.push(mockFile);
    //
    //     SELECTABLE.add(mockFile.previewElement);
    // }
    //
    // [> ---------- HELPER FUNCTIONS ---------- <]
    //
    // function randSize(min, max) {
    //   min = Math.ceil(min);
    //   max = Math.floor(max);
    //   return Math.floor(Math.random() * (max - min + 1)) + min;
    // }
    //
    // function makeid(n) {
    //   var text = "";
    //   var possible = "abcdefghijklmnopqrstuvwxyz0123456789";
    //     const extensions = [".jpg", ".png", ".mp3", ".zip"];
    //     const ext = extensions[Math.floor(Math.random()*extensions.length)];
    //
    //   for (var i = 0; i < n; i++) {
    //     text += possible.charAt(Math.floor(Math.random() * possible.length));
    //     }
    //
    //   return `${text}${ext}`;
    // }




    // function removefileListener(file) {
    //
    // }

    // function dropfileListener(file) {
    //     var dz = $("#model-dropzone [class='dz-image']");
    //     for (var i = 0 ; i < $(dz).length ; i++) {
    //         var x = $($(dz)[i]).find("#remove-file")
    //         if (x.length == 0) {
    //             $($(dz)[i]).prepend('<button class="btn btn-sm float-right" id="remove-file"><i class="fas fa-times"></i></button>');
    //         }
    //     }
    // }
    //
    //
    // Dropzone.options.modelDropzone = {
    //     init: function() {
    //         this.on("addedfile", dropfileListener);
    //     },
    //     maxFilesize: 16, // MB
    //     maxFiles: 8,
    //     // dictInvalidFileType: "Only .stl file is acceptable"
    // };




    // For Resize STLViewer Pannel
    (function($,window,undefined){
      '$:nomunge'; // Used by YUI compressor.
      
      // A jQuery object containing all non-window elements to which the resize
      // event is bound.
      var elems = $([]),
        
        // Extend $.resize if it already exists, otherwise create it.
        jq_resize = $.resize = $.extend( $.resize, {} ),
        
        timeout_id,
        
        // Reused strings.
        str_setTimeout = 'setTimeout',
        str_resize = 'resize',
        str_data = str_resize + '-special-event',
        str_delay = 'delay',
        str_throttle = 'throttleWindow';
      
      // Property: jQuery.resize.delay
      // 
      // The numeric interval (in milliseconds) at which the resize event polling
      // loop executes. Defaults to 250.
      
      jq_resize[ str_delay ] = 250;
      
      // Property: jQuery.resize.throttleWindow
      // 
      // Throttle the native window object resize event to fire no more than once
      // every <jQuery.resize.delay> milliseconds. Defaults to true.
      // 
      // Because the window object has its own resize event, it doesn't need to be
      // provided by this plugin, and its execution can be left entirely up to the
      // browser. However, since certain browsers fire the resize event continuously
      // while others do not, enabling this will throttle the window resize event,
      // making event behavior consistent across all elements in all browsers.
      // 
      // While setting this property to false will disable window object resize
      // event throttling, please note that this property must be changed before any
      // window object resize event callbacks are bound.
      
      jq_resize[ str_throttle ] = true;
      
      // Event: resize event
      // 
      // Fired when an element's width or height changes. Because browsers only
      // provide this event for the window element, for other elements a polling
      // loop is initialized, running every <jQuery.resize.delay> milliseconds
      // to see if elements' dimensions have changed. You may bind with either
      // .resize( fn ) or .bind( "resize", fn ), and unbind with .unbind( "resize" ).
      // 
      // Usage:
      // 
      // > jQuery('selector').bind( 'resize', function(e) {
      // >   // element's width or height has changed!
      // >   ...
      // > });
      // 
      // Additional Notes:
      // 
      // * The polling loop is not created until at least one callback is actually
      //   bound to the 'resize' event, and this single polling loop is shared
      //   across all elements.
      // 
      // Double firing issue in jQuery 1.3.2:
      // 
      // While this plugin works in jQuery 1.3.2, if an element's event callbacks
      // are manually triggered via .trigger( 'resize' ) or .resize() those
      // callbacks may double-fire, due to limitations in the jQuery 1.3.2 special
      // events system. This is not an issue when using jQuery 1.4+.
      // 
      // > // While this works in jQuery 1.4+
      // > $(elem).css({ width: new_w, height: new_h }).resize();
      // > 
      // > // In jQuery 1.3.2, you need to do this:
      // > var elem = $(elem);
      // > elem.css({ width: new_w, height: new_h });
      // > elem.data( 'resize-special-event', { width: elem.width(), height: elem.height() } );
      // > elem.resize();
          
      $.event.special[ str_resize ] = {
        
        // Called only when the first 'resize' event callback is bound per element.
        setup: function() {
          // Since window has its own native 'resize' event, return false so that
          // jQuery will bind the event using DOM methods. Since only 'window'
          // objects have a .setTimeout method, this should be a sufficient test.
          // Unless, of course, we're throttling the 'resize' event for window.
          if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }
          
          var elem = $(this);
          
          // Add this element to the list of internal elements to monitor.
          elems = elems.add( elem );
          
          // Initialize data store on the element.
          $.data( this, str_data, { w: elem.width(), h: elem.height() } );
          
          // If this is the first element added, start the polling loop.
          if ( elems.length === 1 ) {
            loopy();
          }
        },
        
        // Called only when the last 'resize' event callback is unbound per element.
        teardown: function() {
          // Since window has its own native 'resize' event, return false so that
          // jQuery will unbind the event using DOM methods. Since only 'window'
          // objects have a .setTimeout method, this should be a sufficient test.
          // Unless, of course, we're throttling the 'resize' event for window.
          if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }
          
          var elem = $(this);
          
          // Remove this element from the list of internal elements to monitor.
          elems = elems.not( elem );
          
          // Remove any data stored on the element.
          elem.removeData( str_data );
          
          // If this is the last element removed, stop the polling loop.
          if ( !elems.length ) {
            clearTimeout( timeout_id );
          }
        },
        
        // Called every time a 'resize' event callback is bound per element (new in
        // jQuery 1.4).
        add: function( handleObj ) {
          // Since window has its own native 'resize' event, return false so that
          // jQuery doesn't modify the event object. Unless, of course, we're
          // throttling the 'resize' event for window.
          if ( !jq_resize[ str_throttle ] && this[ str_setTimeout ] ) { return false; }
          
          var old_handler;
          
          // The new_handler function is executed every time the event is triggered.
          // This is used to update the internal element data store with the width
          // and height when the event is triggered manually, to avoid double-firing
          // of the event callback. See the "Double firing issue in jQuery 1.3.2"
          // comments above for more information.
          
          function new_handler( e, w, h ) {
            var elem = $(this),
              data = $.data( this, str_data );
            
            // If called from the polling loop, w and h will be passed in as
            // arguments. If called manually, via .trigger( 'resize' ) or .resize(),
            // those values will need to be computed.
            data.w = w !== undefined ? w : elem.width();
            data.h = h !== undefined ? h : elem.height();
            
            old_handler.apply( this, arguments );
          };
          
          // This may seem a little complicated, but it normalizes the special event
          // .add method between jQuery 1.4/1.4.1 and 1.4.2+
          if ( $.isFunction( handleObj ) ) {
            // 1.4, 1.4.1
            old_handler = handleObj;
            return new_handler;
          } else {
            // 1.4.2+
            old_handler = handleObj.handler;
            handleObj.handler = new_handler;
          }
        }
        
      };
      
      function loopy() {
        
        // Start the polling loop, asynchronously.
        timeout_id = window[ str_setTimeout ](function(){
          
          // Iterate over all elements to which the 'resize' event is bound.
          elems.each(function(){
            var elem = $(this),
              width = elem.width(),
              height = elem.height(),
              data = $.data( this, str_data );
            
            // If element size has changed since the last time, update the element
            // data store and trigger the 'resize' event.
            if ( width !== data.w || height !== data.h ) {
              elem.trigger( str_resize, [ data.w = width, data.h = height ] );
            }
            
          });
          
          // Loop.
          loopy();
          
        }, jq_resize[ str_delay ] );
        
      };
      
    })(jQuery,this);



    // STLViewer Rendering Object
    function STLViewer(model, elementID) {
        var elem = document.getElementById(elementID);
        var camera = new THREE.PerspectiveCamera(70, 
            elem.clientWidth/elem.clientHeight, 1, 1000);
        var renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(elem.clientWidth, elem.clientHeight);
        elem.appendChild(renderer.domElement);	

        var controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.rotateSpeed = 0.15;
        controls.dampingFactor = 0.05;
        controls.enableZoom = true;
        controls.autoRotate = true;
        controls.autoRotateSpeed = 3;
        controls.mouseButtons.RIGHT = null;
        // TRHEE.TOUCE.TOLLY_ROTATE 
        controls.touches.TWO = 3;

        var scene = new THREE.Scene();
        scene.add(new THREE.HemisphereLight(0xffffff, 1.5));

        function getGeometry(geometry) {
            geometry.rotateX(-Math.PI / 2);
            geometry.rotateY(Math.PI / 2);
            // geometry.rotateZ(-Math.PI / 2);
            var modelColor = getComputedStyle(document.body).getPropertyValue('--basesub-color');
            modelColor = parseInt(modelColor.replace('#', '0x'), 16);
            var material = new THREE.MeshPhongMaterial({ 
                color: modelColor, 
                specular: 100, 
                shininess: 100 
            });
            var mesh = new THREE.Mesh(geometry, material);
            // mesh.rotation.x = -Math.PI / 2;
            scene.add(mesh);

            
            var middle = new THREE.Vector3();
            geometry.computeBoundingBox();
            geometry.boundingBox.getCenter(middle);
            mesh.position.x = -1 * middle.x;
            mesh.position.y = -1 * middle.y;
            mesh.position.z = -1 * middle.z;
            var largestDimension = Math.max(geometry.boundingBox.max.x,
                                        geometry.boundingBox.max.y, 
                                        geometry.boundingBox.max.z)
            camera.position.z = largestDimension * 1.5;

            initCamX = camera.position.x 
            initCamY = camera.position.y 
            initCamZ = camera.position.z

            modelFlag = true;
            var animate = function () {
                if (modelFlag == true) {
                    requestAnimationFrame(animate);
                    controls.update();
                    renderer.render(scene, camera);
                }
                return ;
            }; 

            animate();


            function resizeListener(e) {
                renderer.setSize(elem.clientWidth, elem.clientHeight);
                camera.aspect = elem.clientWidth/elem.clientHeight;
                camera.updateProjectionMatrix();
            }
            
            window.addEventListener('resize', resizeListener, false);
            $("#model-wrapper").resize(resizeListener);

            function reload(){
                camera.position.x = initCamX
                camera.position.y = initCamY
                camera.position.z = initCamZ
            }
            
            $('#reset').on('click', reload);
        }

        
        (new THREE.STLLoader()).load(model, getGeometry);

    }

// }
